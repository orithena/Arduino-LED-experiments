#define SHOW_TEXT_DELAY 144
CRGB text_color = CHSV(170, 255, 255);

static unsigned char Font5x7[] = {
  0x00, 0x00, 0x00, 0x00, 0x00,//00 (space)
  0x00, 0x00, 0x5F, 0x00, 0x00,//01 !
  0x00, 0x07, 0x00, 0x07, 0x00,//02 "
  0x14, 0x7F, 0x14, 0x7F, 0x14,//03 #
  0x24, 0x2A, 0x7F, 0x2A, 0x12,//04 $
  0x23, 0x13, 0x08, 0x64, 0x62,//05 %
  0x36, 0x49, 0x55, 0x22, 0x50,//06 &
  0x00, 0x05, 0x03, 0x00, 0x00,//07 '
  0x00, 0x1C, 0x22, 0x41, 0x00,//08 (
  0x00, 0x41, 0x22, 0x1C, 0x00,//09 )
  0x08, 0x2A, 0x1C, 0x2A, 0x08,//10 *
  0x08, 0x08, 0x3E, 0x08, 0x08,//11 +
  0x00, 0x50, 0x30, 0x00, 0x00,//12 ,
  0x08, 0x08, 0x08, 0x08, 0x08,//13 -
  0x00, 0x60, 0x60, 0x00, 0x00,//14 .
  0x20, 0x10, 0x08, 0x04, 0x02,//15 /
  0x3E, 0x51, 0x49, 0x45, 0x3E,//16 0
  0x00, 0x42, 0x7F, 0x40, 0x00,//17 1
  0x42, 0x61, 0x51, 0x49, 0x46,//18 2
  0x21, 0x41, 0x45, 0x4B, 0x31,//19 3
  0x18, 0x14, 0x12, 0x7F, 0x10,//20 4
  0x27, 0x45, 0x45, 0x45, 0x39,//21 5
  0x3C, 0x4A, 0x49, 0x49, 0x30,//22 6
  0x01, 0x71, 0x09, 0x05, 0x03,//23 7
  0x36, 0x49, 0x49, 0x49, 0x36,//24 8
  0x06, 0x49, 0x49, 0x29, 0x1E,//25 9
  0x00, 0x36, 0x36, 0x00, 0x00,//26 :
  0x00, 0x56, 0x36, 0x00, 0x00,//27 ;
  0x00, 0x08, 0x14, 0x22, 0x41,//28 <
  0x14, 0x14, 0x14, 0x14, 0x14,//29 =
  0x41, 0x22, 0x14, 0x08, 0x00,//30 >
  0x02, 0x01, 0x51, 0x09, 0x06,//31 ?
  0x32, 0x49, 0x79, 0x41, 0x3E,//32 @
  0x7E, 0x11, 0x11, 0x11, 0x7E,//33 A
  0x7F, 0x49, 0x49, 0x49, 0x36,//34 B
  0x3E, 0x41, 0x41, 0x41, 0x22,//35 C
  0x7F, 0x41, 0x41, 0x22, 0x1C,//36 D
  0x7F, 0x49, 0x49, 0x49, 0x41,//37 E
  0x7F, 0x09, 0x09, 0x01, 0x01,//38 F
  0x3E, 0x41, 0x41, 0x51, 0x32,//39 G
  0x7F, 0x08, 0x08, 0x08, 0x7F,//40 H
  0x00, 0x41, 0x7F, 0x41, 0x00,//41 I
  0x20, 0x40, 0x41, 0x3F, 0x01,//42 J
  0x7F, 0x08, 0x14, 0x22, 0x41,//43 K
  0x7F, 0x40, 0x40, 0x40, 0x40,//44 L
  0x7F, 0x02, 0x04, 0x02, 0x7F,//45 M
  0x7F, 0x04, 0x08, 0x10, 0x7F,//46 N
  0x3E, 0x41, 0x41, 0x41, 0x3E,//47 O
  0x7F, 0x09, 0x09, 0x09, 0x06,//48 P
  0x3E, 0x41, 0x51, 0x21, 0x5E,//49 Q
  0x7F, 0x09, 0x19, 0x29, 0x46,//50 R
  0x46, 0x49, 0x49, 0x49, 0x31,//51 S
  0x01, 0x01, 0x7F, 0x01, 0x01,//52 T
  0x3F, 0x40, 0x40, 0x40, 0x3F,//53 U
  0x1F, 0x20, 0x40, 0x20, 0x1F,//54 V
  0x7F, 0x20, 0x18, 0x20, 0x7F,//55 W
  0x63, 0x14, 0x08, 0x14, 0x63,//56 X
  0x03, 0x04, 0x78, 0x04, 0x03,//57 Y
  0x61, 0x51, 0x49, 0x45, 0x43,//58 Z
  0x00, 0x00, 0x7F, 0x41, 0x41,//59 [
  0x02, 0x04, 0x08, 0x10, 0x20,//60 "\"
  0x41, 0x41, 0x7F, 0x00, 0x00,// ]
  0x04, 0x02, 0x01, 0x02, 0x04,// ^
  0x40, 0x40, 0x40, 0x40, 0x40,// _
  0x00, 0x01, 0x02, 0x04, 0x00,// `
  0x20, 0x54, 0x54, 0x54, 0x78,// a
  0x7F, 0x48, 0x44, 0x44, 0x38,// b
  0x38, 0x44, 0x44, 0x44, 0x20,// c
  0x38, 0x44, 0x44, 0x48, 0x7F,// d
  0x38, 0x54, 0x54, 0x54, 0x18,// e
  0x08, 0x7E, 0x09, 0x01, 0x02,// f
  0x08, 0x14, 0x54, 0x54, 0x3C,// g
  0x7F, 0x08, 0x04, 0x04, 0x78,// h
  0x00, 0x44, 0x7D, 0x40, 0x00,// i
  0x20, 0x40, 0x44, 0x3D, 0x00,// j
  0x00, 0x7F, 0x10, 0x28, 0x44,// k
  0x00, 0x41, 0x7F, 0x40, 0x00,// l
  0x7C, 0x04, 0x18, 0x04, 0x78,// m
  0x7C, 0x08, 0x04, 0x04, 0x78,// n
  0x38, 0x44, 0x44, 0x44, 0x38,// o
  0x7C, 0x14, 0x14, 0x14, 0x08,// p
  0x08, 0x14, 0x14, 0x18, 0x7C,// q
  0x7C, 0x08, 0x04, 0x04, 0x08,// r
  0x48, 0x54, 0x54, 0x54, 0x20,// s
  0x04, 0x3F, 0x44, 0x40, 0x20,// t
  0x3C, 0x40, 0x40, 0x20, 0x7C,// u
  0x1C, 0x20, 0x40, 0x20, 0x1C,// v
  0x3C, 0x40, 0x30, 0x40, 0x3C,// w
  0x44, 0x28, 0x10, 0x28, 0x44,// x
  0x0C, 0x50, 0x50, 0x50, 0x3C,// y
  0x44, 0x64, 0x54, 0x4C, 0x44,// z
  0x00, 0x08, 0x36, 0x41, 0x00,// {
  0x00, 0x00, 0x7F, 0x00, 0x00,// |
  0x00, 0x41, 0x36, 0x08, 0x00,// }
  0x08, 0x08, 0x2A, 0x1C, 0x08,// ->
  0x08, 0x1C, 0x2A, 0x08, 0x08 // <-
};

unsigned char* Char(unsigned char* font, char c) {
  return &font[(c - 32) * 5];
}

void DrawSpriteCol(unsigned char* sprite, int length, int xOffset, int yOffset, CRGB col) {
  //  leds[ XYsafe(x, y) ] = CHSV(0, 0, 255);
  for ( byte y = 0; y < 7; y++) {
    for ( byte x = 0; x < 5; x++) {
      bool on = (sprite[x] >> (6 - y) & 1) * 255;
      if (on) {
        leds[ XYsafe(x + xOffset, y + yOffset) ] = col;
        //fadeToBlackBy(&leds[XYsafe(x + xOffset, y + yOffset)], 1, 224);
      }
    }
  }
}

void DrawSprite(unsigned char* sprite, int length, int xOffset, int yOffset) {
  DrawSpriteCol( sprite, length, xOffset, yOffset, text_color);
}

void DrawLetterCol(unsigned char* text, int x, int y, CRGB col) {
  DrawSpriteCol(Char(Font5x7, *text), 0, x, y, col);
}

void DrawText(char *text, int x, int y) {
  for (int i = 0; i < strlen(text); i++) {
    DrawSprite(Char(Font5x7, text[i]), 5, x + i * 6, y);
  }
}

void Marquee(char *text, int y, int startms) {
  uint32_t ms = millis();
  int l = strlen(text);
  int x = ((ms-startms)>>7)%((l*6)+kMatrixWidth);
  DrawText(text, kMatrixWidth-x, y);
}

void DrawTextOneFrame(char *text, int xOffset, int yOffset) {
  DrawText(text, 10 - xOffset, yOffset);
}

void DrawNumberOneFrame(uint32_t number, int xOffset, int yOffset) {
  char buffer[7];
  //itoa(number,buffer,10);
  sprintf(buffer, "%02d", number);
  DrawTextOneFrame(buffer, xOffset, yOffset); 
}

void ShowText(char *text) {
  for( int i = 0; i < (strlen(text)+4)*6; i++ ) {
    Clear();
    DrawTextOneFrame(text, i, 3);
    FastLED.show();
    delay(SHOW_TEXT_DELAY);
  }
}

void set_text_color(CRGB col) {
  text_color = col;
}

uint16_t XYsafe( int x, int y)
{
  if ( x >= kMatrixWidth) return NUM_LEDS;
  if ( y >= kMatrixHeight) return NUM_LEDS;
  if ( x < 0) return NUM_LEDS;
  if ( y < 0) return NUM_LEDS;
  return (y*kMatrixWidth) + x;
}

void Clear() {
  for ( byte y = 0; y < kMatrixHeight; y++) {
    for ( byte x = 0; x < kMatrixWidth; x++) {
      leds[ XYsafe(x, y)]  = CHSV((16*y)+(47*x), 255, 16);
    }
  }
}

inline boolean between(long l, long x, long u) {
  return (unsigned)(x - l) <= (u - l);
}


