
static uint16_t Font5x12[] = {
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,

  0b0000001111111100,
  0b0000010000011010,
  0b0000100001100001,
  0b0000010110000010,
  0b0000001111111100,
                    
  0b0000000100000001,
  0b0000011000000001,
  0b0000111111111111,
  0b0000000000000001,
  0b0000000000000001,
                    
  0b0000010000000011,
  0b0000100000001101,
  0b0000100000110001,
  0b0000010001000001,
  0b0000001110000001,
                    
  0b0000010000000010,
  0b0000100000000001,
  0b0000100001000001,
  0b0000010010100010,
  0b0000001100011100,
                    
  0b0000000001000000,
  0b0000000111000000,
  0b0000011001000000,
  0b0000100001000000,
  0b0000111111111111,
                    
  0b0000111111000010,
  0b0000100001000001,
  0b0000100001000001,
  0b0000100000100010,
  0b0000100000011100,
                    
  0b0000000111111100,
  0b0000001001000010,
  0b0000010001000001,
  0b0000100000100010,
  0b0000100000011100,
                    
  0b0000100000000000,
  0b0000100000001111,
  0b0000100001110000,
  0b0000100110000000,
  0b0000111000000000,
                    
  0b0000001100011100,
  0b0000010010100010,
  0b0000100001000001,
  0b0000010010100010,
  0b0000001100011100,
                    
  0b0000001100000000,
  0b0000010010000000,
  0b0000100001000011,
  0b0000010001001100,
  0b0000001111110000,
                    
  0b0000000111111111,
  0b0000011001000000,
  0b0000100001000000,
  0b0000011001000000,
  0b0000000111111111,
                    
  0b0000111111111111,
  0b0000100001000001,
  0b0000100001000001,
  0b0000010010100010,
  0b0000001100011100,
                    
  0b0000001111111100,
  0b0000010000000010,
  0b0000100000000001,
  0b0000100000000001,
  0b0000010000000010,
                    
  0b0000111111111111,
  0b0000100000000001,
  0b0000100000000001,
  0b0000010000000010,
  0b0000001111111100,
                    
  0b0000111111111111,
  0b0000100001000001,
  0b0000100001000001,
  0b0000100001000001,
  0b0000100000000001,
                    
  0b0000111111111111,
  0b0000100001000000,
  0b0000100001000000,
  0b0000100001000000,
  0b0000100000000000,
                    
  0b0000001111111100,
  0b0000010000000010,
  0b0000100000000001,
  0b0000100001000001,
  0b0000010001111110,
                    
  0b0000111111111111,
  0b0000000001000000,
  0b0000000001000000,
  0b0000000001000000,
  0b0000111111111111,
                    
  0b0000000000000000,
  0b0000100000000001,
  0b0000111111111111,
  0b0000100000000001,
  0b0000000000000000,
                    
  0b0000100000000010,
  0b0000100000000001,
  0b0000100000000001,
  0b0000100000000010,
  0b0000111111111100,
                    
  0b0000111111111111,
  0b0000000010100000,
  0b0000001100011000,
  0b0000010000000110,
  0b0000100000000001,
                    
  0b0000111111111111,
  0b0000000000000001,
  0b0000000000000001,
  0b0000000000000001,
  0b0000000000000001,
                    
  0b0000111111111111,
  0b0000011000000000,
  0b0000000111000000,
  0b0000011000000000,
  0b0000111111111111,
                    
  0b0000111111111111,
  0b0000001100000000,
  0b0000000011110000,
  0b0000000000001100,
  0b0000111111111111,
                    
  0b0000001111111100,
  0b0000010000000010,
  0b0000100000000001,
  0b0000010000000010,
  0b0000001111111100,
                    
  0b0000111111111111,
  0b0000100001000000,
  0b0000100001000000,
  0b0000010010000000,
  0b0000001100000000,
                    
  0b0000001111111100,
  0b0000010000000010,
  0b0000100000001101,
  0b0000010000000010,
  0b0000001111111101,
                    
  0b0000111111111111,
  0b0000100001000000,
  0b0000100001110000,
  0b0000010010001100,
  0b0000001100000011,
                    
  0b0000001100000001,
  0b0000010010000001,
  0b0000100001000001,
  0b0000100000100010,
  0b0000100000011100,
                    
  0b0000100000000000,
  0b0000100000000000,
  0b0000111111111111,
  0b0000100000000000,
  0b0000100000000000,
                    
  0b0000111111111100,
  0b0000000000000010,
  0b0000000000000001,
  0b0000000000000010,
  0b0000111111111100,
                    
  0b0000111111100000,
  0b0000000000011100,
  0b0000000000000011,
  0b0000000000011100,
  0b0000111111100000,
                    
  0b0000111111111100,
  0b0000000000000011,
  0b0000000001111100,
  0b0000000000000011,
  0b0000111111111100,
                    
  0b0000111000000111,
  0b0000000110011000,
  0b0000000001100000,
  0b0000000110011000,
  0b0000111000000111,
                    
  0b0000111000000000,
  0b0000000110000000,
  0b0000000001111111,
  0b0000000110000000,
  0b0000111000000000,
                    
  0b0000100000000111,
  0b0000100000011001,
  0b0000100011100001,
  0b0000101100000001,
  0b0000110000000001
};

uint16_t* Char(uint16_t* font, char c) {
  if( c > 0x2F && c < 0x3A ) {             //numbers
    c -= 0x2F;
  } else if( c > 0x40 && c < 0x5B ) {      //big letters
    c -= 0x36;
  } else if( c > 0x60 && c < 0x7B ) {      //small letters -> mapped to big letters
    c -= 0x56;
  } else {                                 //any unsupported character
    c = 0;
  }
  return &font[c * 5];
}

void DrawSprite(uint16_t* sprite, int xOffset, CRGB col) {
  if( xOffset > 4 ) { Clear(); return; }
  for ( byte y = 0; y < 12; y++) {
      if ((sprite[xOffset] >> (11 - y)) & 0x01) {
        leds[ y ]  = col;
      }
  }
}

void DrawText(char *text, int x) {
  if(oldx > x) {
    tcol = (tcol + 1) & 0x07;
    if( tcol == 0 ) tcol = 1;
  }
  oldx = x;
  DrawSprite(Char(Font5x12, text[x/6]), x%6, CRGB(255 * (tcol & 0x01), 255 * ((tcol >> 1) & 0x01), 255 * ((tcol >> 2) & 0x01)));
}

void loop_Text(uint32_t ms) {
  Clear();
  DrawText(TEXT_STRING, ((ms >> 3) & 0x00000FFF) % 36);
  base_Color(CRGB(0,0,255));
}
